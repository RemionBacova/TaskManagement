@inject HttpClient http
@inject IModalService Modal
@using TaskManagementInterface.Data.Models
@using TaskManagementInterface.Services.Types




    <div class="modal-body" style="width:500px">



       
        <div class="form-inline">
            <div class="col-md-11">
                <SfTextBox Readonly="true" Placeholder='Select Parent' FloatLabelType='@FloatLabelType.Auto' @bind-Value="ParentName"></SfTextBox>
            </div>
                <div class="col-md-1">
                    <SfButton CssClass="e-round" IconCss="e-icons e-plus-icon" IsPrimary="true" @onclick="ButtonParent"></SfButton>
               
            </div>
        </div>

        <br />
        <div class="form-inline">
            <div class="form-group col-md-11">
                <SfTextBox Placeholder='Nomination' FloatLabelType='@FloatLabelType.Auto' @bind-Value="TypeModel.nomination"></SfTextBox>
            </div>
        </div>

        <br />
        <br />

        <div class="form-inline">
            <div class="form-group col-md-11">
                <SfTextBox Placeholder='Code' FloatLabelType='@FloatLabelType.Auto' @bind-Value="TypeModel.code"></SfTextBox>

            </div>
        </div>


        <br />
        <div class="form-inline">
            <div class="form-group col-md-11">
                <SfNumericTextBox Placeholder='Code Actual' FloatLabelType='@FloatLabelType.Auto' @bind-Value="TypeModel.codeactual"/>


            </div>
        </div>

        <br />
        <br />
        <div class="form-inline">
            <div class="form-group col-md-11">
                <SfNumericTextBox Placeholder='Code Begin' FloatLabelType='@FloatLabelType.Auto' @bind-Value="TypeModel.codebegin"></SfNumericTextBox>

            </div>
        </div>

        <br />
        <br />
        <div class="form-inline">
            <div class="form-group col-md-11">
                <SfNumericTextBox Placeholder='Code End' FloatLabelType='@FloatLabelType.Auto' @bind-Value="TypeModel.codeend"></SfNumericTextBox>


            </div>
        </div>

        <br />
        <div class="form-inline">
            <div class="form-group col-md-11">
                <SfTextBox Placeholder='Description' FloatLabelType='@FloatLabelType.Auto' @bind-Value="TypeModel.description"></SfTextBox>

            </div>
        </div>

        <br />

        <div class="form-inline">
            <div class="form-group col-md-11">
                @if (TypeModel.elcat)
                {
                    <SfCheckBox Label="Contains Elements" @bind-Checked="TypeModel.elcat"></SfCheckBox>
                }
                else
                {
                    <SfCheckBox Label="Contains Elements" @bind-Checked="TypeModel.elcat"></SfCheckBox>
                }

            </div>
        </div>

        <br />




        <SfButton @onclick="SubmitForm" CssClass="e-info">Submit</SfButton>
        <SfButton @onclick="Cancel" CssClass="e-primary">Cancel</SfButton>

     
    </div>



            @code {
                [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

                private tbl_TABLE_TYPE TypeModel = new tbl_TABLE_TYPE();
                TypeServices typeServices = new TypeServices();
                [Parameter] public bool addOrEdit { get; set; }
                [Parameter] public string tableName { get; set; }
                [Parameter] public int uid { get; set; }
                [Parameter] public string uid_sup { get; set; }
                [Parameter] public string CategoryUID { get; set; }

                private string returnValue = "";
                public string ParentName = "";
                public string ParentID = "";

                protected async void OnLoad()
                {


                    if (!addOrEdit)
                    {

                        TypeModel = await typeServices.SelectRecById(tableName, uid.ToString());

                        if (TypeModel.uid_sup != null)
                        {
                            ParentID = TypeModel.uid_sup.ToString();
                            ParentName = (await typeServices.SelectRecById(tableName, TypeModel.uid_sup.ToString())).nomination;

                        }
                        else
                        {
                            ParentID = "";
                            ParentName = "";
                        }


                    }
                    StateHasChanged();
                }

                protected override void OnInitialized() => OnLoad();

                void SubmitForm() => Save();
                void Cancel() => BlazoredModal.Cancel();

                protected async Task Save()
                {

                    TaskManagementInterface.Data.Error errorModel = new TaskManagementInterface.Data.Error();
                    string parameters;
                    if (ParentID == "")
                    {

                        parameters = "?description=" + TypeModel.description + "&codeend=" + TypeModel.codeend+ "&codebegin=" + TypeModel.codebegin+ "&codeactual=" + TypeModel.codeactual;
                    }
                    else
                    {
                        parameters = "?uid_sup=" + ParentID + "&description=" + TypeModel.description + "&codeend="+TypeModel.codeend+ "&codebegin=" + TypeModel.codebegin + "&codeactual=" + TypeModel.codeactual;
                    }

                    if (!addOrEdit)
                    {

                        errorModel =  await typeServices.Update(TypeModel, tableName, parameters);
                        var parametersError = new ModalParameters();

                        parametersError.Add(nameof(ErrorDatabaseMessage.ErrorName), errorModel.ERRORNAME);
                        parametersError.Add(nameof(ErrorDatabaseMessage.Id), errorModel.UID);
                        var messageForm = Modal.Show<ErrorDatabaseMessage>("Message", parametersError);

                    }
                    else
                    {
                        errorModel =  await typeServices.Add(TypeModel, tableName,CategoryUID, parameters);
                        var parametersError = new ModalParameters();
                        parametersError.Add(nameof(ErrorDatabaseMessage.ErrorName), errorModel.ERRORNAME);
                        parametersError.Add(nameof(ErrorDatabaseMessage.Id), errorModel.UID);
                        var messageForm = Modal.Show<ErrorDatabaseMessage>("Message", parametersError);



                        var result = await messageForm.Result;


                    }
                    StateHasChanged();
                    BlazoredModal.Close(ModalResult.Ok(returnValue));
                }

                async Task ButtonParent()
                {
                    var parameters2 = new ModalParameters();

                    parameters2.Add(nameof(ParentTypeModal.tableName), tableName);
                    parameters2.Add(nameof(ParentTypeModal.uid), uid);
                    var messageForm = Modal.Show<ParentTypeModal>("Select Parent", parameters2);



                    var result = await messageForm.Result;
                    /// do mar result dhe do e vej tek text box

                    if (result.Data is null)
                    {
                        ParentID = "";
                    }
                    else
                    {
                        ParentID = result.Data.ToString();
                    }


                    if (ParentID != "")
                    {

                        ParentName = (await typeServices.SelectRecById(tableName,ParentID)).nomination;

                    }
                    else
                    {
                        ParentName = "";
                    }

                }


                }

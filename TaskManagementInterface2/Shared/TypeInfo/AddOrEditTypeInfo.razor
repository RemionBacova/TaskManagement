@inject HttpClient http
@inject IModalService Modal
@using TaskManagementInterface.Data.Models
@using TaskManagementInterface.Services.Types
@using TaskManagementInterface.Services.TypeInfo
@using Syncfusion.Blazor.DropDowns
@using TaskManagementInterface.Data.Models.Type 



    <div class="modal-body" style="width:450px">

        <div class="form-inline">
            <div class="form-group col-md-12">

                <SfTextBox Placeholder='Nomination' FloatLabelType='@FloatLabelType.Auto' @bind-Value="TypeModel.nomination"></SfTextBox>
            </div>
        </div>



        <div class="form-inline">
            <div class="form-group col-md-12">
                <SfTextBox Placeholder='Description' FloatLabelType='@FloatLabelType.Auto' @bind-Value="TypeModel.description"></SfTextBox>
            </div>
        </div>

        <br />

        <div class="form-inline">

            <div class="form-group col-md-12">

                <SfDropDownList TValue="string" Placeholder="Select Entitie" TItem="GetTypes" @bind-Value="TypeModel.description2"  DataSource="@getTypes">
                    <DropDownListEvents TValue="string"></DropDownListEvents>
                    <DropDownListFieldSettings Value="uid" Text="name"></DropDownListFieldSettings>
                </SfDropDownList>
             </div>
         </div>

        <br />
            
            <div class="form-inline">
                @if (TypeModel.mandatory)
                {
                    <SfCheckBox Label="Manatory" @bind-Checked="TypeModel.mandatory"></SfCheckBox>
                }
                else
                {
                    <SfCheckBox Label="Manatory" @bind-Checked="TypeModel.mandatory"></SfCheckBox>
                }
            </div>

          <br />




            <div class="form-inline">
                @if (TypeModel.file)
                {
                    <SfCheckBox Label="File" @bind-Checked="TypeModel.file"></SfCheckBox>
                }
                else
                {
                    <SfCheckBox Label="File" @bind-Checked="TypeModel.file"></SfCheckBox>
                }
            </div>

            <br />






            <SfButton @onclick="SubmitForm" CssClass="e-info">Submit</SfButton>
            <SfButton @onclick="Cancel" CssClass="e-primary">Cancel</SfButton>
        </div>



@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    private tbl_TABLE_TYPE_INFO TypeModel = new tbl_TABLE_TYPE_INFO();
    private List<TaskManagementInterface.Data.Models.Type.GetTypes> getTypes = new List<TaskManagementInterface.Data.Models.Type.GetTypes>();

    TypeInfoServices typeInfoServices = new TypeInfoServices();
    [Parameter] public bool addOrEdit { get; set; }
    [Parameter] public string tableName { get; set; }
    [Parameter] public int uid { get; set; }
    [Parameter] public string uid_sup { get; set; }
    [Parameter] public string CategoryUID { get; set; }
    [Parameter] public string TypeUid { get; set; }
    private string returnValue = "";
    public string ParentName = "";
    public string ParentID = "";

    protected async void OnLoad()
    {
        getTypes = await typeInfoServices.SelectTypes();

        if (!addOrEdit)
        {

            TypeModel = await typeInfoServices.SelectRecById(tableName, uid.ToString());

            if (TypeModel.uid_sup != null)
            {
                ParentID = TypeModel.uid_sup.ToString();
                ParentName = (await typeInfoServices.SelectRecById(tableName, TypeModel.uid_sup.ToString())).nomination;

            }
            else
            {
                ParentID = "";
                ParentName = "";
            }


        }
        StateHasChanged();
    }

    protected override void OnInitialized() => OnLoad();

    void SubmitForm() => Save();
    void Cancel() => BlazoredModal.Cancel();

    protected async Task Save()
    {

        TaskManagementInterface.Data.Error errorModel = new TaskManagementInterface.Data.Error();
        string parameters;

        //Type_uid per tu rregulluar


        if (!addOrEdit)
        {


            parameters = "?description=" + TypeModel.description + "&type_uid="+TypeUid+ "&description2=" + TypeModel.description2 + "&mandatory=" + TypeModel.mandatory + "&file=" + TypeModel.file + "&queue=" +TypeModel.uid;

            errorModel = await typeInfoServices.Update(TypeModel, tableName, parameters);
            var parametersError = new ModalParameters();
            parametersError.Add(nameof(ErrorDatabaseMessage.ErrorName), errorModel.ERRORDESCRIPTION);
            parametersError.Add(nameof(ErrorDatabaseMessage.Id), errorModel.UID);
            var messageForm = Modal.Show<ErrorDatabaseMessage>("Message", parametersError);

        }
        else
        {
            parameters = "?description="+ TypeModel.description  + "&type_uid=" + TypeUid + "&description2=" + TypeModel.description2 + "&mandatory=" + TypeModel.mandatory + "&file=" + TypeModel.file;


            errorModel = await typeInfoServices.Add(TypeModel, tableName, parameters);
            var parametersError = new ModalParameters();
            parametersError.Add(nameof(ErrorDatabaseMessage.ErrorName), errorModel.ERRORDESCRIPTION);
            parametersError.Add(nameof(ErrorDatabaseMessage.Id), errorModel.UID);
            var messageForm = Modal.Show<ErrorDatabaseMessage>("Message", parametersError);



            var result = await messageForm.Result;


        }
        StateHasChanged();
        BlazoredModal.Close(ModalResult.Ok(returnValue));
    }







}

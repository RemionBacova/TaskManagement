@page "/EmployeeHolidays"
@using Syncfusion.Blazor.Schedule
@inject IModalService Modal
@using TaskManagementInterface.Shared.Calendar
    <div>
        <div class="row">
            <div class="col-md-7">
                <SfTextBox @bind-Value="EmployeeName"></SfTextBox>
            </div>
            <div class="col-md-1">
                <SfButton @onclick="SelectEmployee">...</SfButton>
            </div>
        </div>
        <br />
        <br />
        <div class="row">
            <div class="col-md-8">
                <SfSchedule  TValue="AppointmentData"  @ref="@ScheduleRef"  Width="100%" Height="510px" SelectedDate="@DateTime.Now">
                    <ScheduleViews>
                        <ScheduleEvents TValue="AppointmentData" OnCellClick="OnCellClick" OnEventClick="OnEventClick"></ScheduleEvents>
                        <ScheduleEventSettings   EnableMaxHeight="true" TValue="AppointmentData" DataSource="@DataSource"></ScheduleEventSettings>
                        <ScheduleView  Option="View.Month"></ScheduleView>
                    </ScheduleViews>
                </SfSchedule>
                <br />
                <div class="row">
                    <div class="col-md-3">
                        <SfButton>Add</SfButton>
                    </div>
                    <div class="col-md-3">
                        <SfButton>Edit</SfButton>
                    </div>
                    <div class="col-md-2">
                        <SfButton>Delete</SfButton>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <SfTextBox></SfTextBox>
                <SfTextBox></SfTextBox>
                <SfTextBox></SfTextBox>
            </div>
        </div>
    </div>
@*custom code start*@

@*custom code end*@
@code{
    string EmployeeName = "";
    string _returnMessage = "";
    string EmployeeId = "";
    List<TaskManagementInterface.Data.tbl_TABLE_Model> Holidays = new List<Data.tbl_TABLE_Model>();
    TaskManagementInterface.Services.Calendar.CalendarServices calendarservice = new Services.Calendar.CalendarServices();
    AppointmentData model = new AppointmentData();
    SfSchedule<AppointmentData> ScheduleRef;

    List<AppointmentData> DataSource = new List<AppointmentData>();


    public async void OnCellClick(CellClickEventArgs args)
    {
        var cellData = await ScheduleRef.GetCellDetails(args.Element); //to get the current cell details
        await ScheduleRef.OpenEditor(cellData, CurrentAction.Add); //to open the editor on cell click
    }


    public async void OnEventClick(EventClickArgs<AppointmentData> args)
    {
        var CellData = await ScheduleRef.GetEventDetails(args.Element);

    }

    public class AppointmentData
    {
        public int Id { get; set; }
        public string Subject { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Name { get; set; }
    }

    protected async Task SelectEmployee()
    {
        var messageForm = Modal.Show<ChooseEmployee>("Choose Emplyee");
        var result = await messageForm.Result;
        if (!result.Cancelled)
            _returnMessage = result.Data?.ToString() ?? string.Empty;

        string[] test = (string[])result.Data;

        EmployeeName =test[1];
        EmployeeId = test[0];
        Holidays = await calendarservice.SelectEmployeeHolidays(EmployeeId.ToString());
        foreach (var element in Holidays)
        {
            AppointmentData model = new AppointmentData();

            model.Id = element.uid;
            model.Subject = element.description;
            model.StartTime = DateTime.Parse(element.nomination);
            model.EndTime = DateTime.Parse(element.nomination);
            model.Name = element.description;
            DataSource.Add(model);

        }
        StateHasChanged();

    }
    public void OnCreated(object sender)
    {

    }
}
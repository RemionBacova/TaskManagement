@page "/editotipe"
@inject HttpClient http;
@using Newtonsoft.Json;
@using Syncfusion.Blazor.Navigations
@using TaskManagementInterface.Data
    <style>
       
       

     
        .sf-license-warning {
            display: none !important;
        }

        .custom {
            font-weight:900;
            color:black;
        }
    
    
</style>
<div >
    <h5> To choose the types of a category that you want to edit press "Right-Click " on a category :</h5>
    <div class="row">
        @*Afishimi i Entiteteve*@
        <div class="col-md-3">
            <h6 class="pt-3 pl-3" style="font-weight:bold;color:black">Entities</h6>

                <select class="form-control" style="width:15em;border-radius:7px" @onchange="@EntitieClicked">
                    <option value="">-- Select Entitie --</option>
                    @if (Entities != null)
                    {
                        @foreach (var entitet in Entities)
                        {
                            <option value="@entitet.nomination">@entitet.nomination</option>

                        }
                    }
                    else
                    {

                    }
                </select>
        </div>
        <div class="col-md-3">

            @*Afishimi i kategorive*@
            @if (MyElement.Count > 0)
            {<h6 class="pt-3 pl-3" style="font-weight:bold;color:black">Categories</h6>
                <div id="treeview">
                    <SfTreeView TValue="MailItem" CssClass="custom" AllowEditing="true">
                        <TreeViewFieldsSettings TValue="MailItem" Id="Id" DataSource="@MyElement" Text="ElementName" ParentID="ParentId" HasChildren="HasSubFolders" Expanded="Expanded"></TreeViewFieldsSettings>
                        <TreeViewEvents TValue="MailItem" NodeClicked="nodeClicked"></TreeViewEvents>
                        <SfContextMenu @ref="menu" Target="#treeview" Items="@MenuItems">
                            <ContextMenuEvents ItemSelected="MenuSelect"></ContextMenuEvents>
                        </SfContextMenu>
                    </SfTreeView>
                </div>
            }
            else
            {
                <p></p>
            }
        </div>

        @*Afishimi i tipeve*@
        <div class="col-md-3">
            @if (MyTipElement.Count > 0)
            {
                <h6 class="pt-3 pl-3" style="font-weight:bold;color:black">Types</h6>
                <div id="treeviewTip" style="font-size:12px;font-weight:bold;color:black">
                    <SfTreeView TValue="MailItem" CssClass="custom" AllowEditing="true">
                        <TreeViewFieldsSettings TValue="MailItem" Id="Id" DataSource="@MyTipElement" Text="ElementName" ParentID="ParentId" HasChildren="HasSubFolders" Expanded="Expanded"></TreeViewFieldsSettings>
                        <TreeViewEvents TValue="MailItem" NodeClicked="nodeTipClicked"></TreeViewEvents>
                        <SfContextMenu @ref="menu" Target="#treeviewTip" Items="@MenuItemsForType">
                            <ContextMenuEvents ItemSelected="MenuSelectForTipe"></ContextMenuEvents>
                        </SfContextMenu>
                    </SfTreeView>
                </div>

            }
            else
            {
                <p></p>
            }
            @if (ShfaqButon == true)
            {
                <br />
                <button class="btn btn-primary" @onclick="NewType">Shto tip</button>
            }

        </div>

        @*Editimi i tipeve*@

        @if (KrijoTip==true)
        {
            <div class=col-md-3>

                
                <EditForm Model="@tipi" OnValidSubmit="SaveNewType">

                    <div class="form-group">
                        <label style="font-weight:bold;color:black"> Nomination:</label>
                        <InputText @bind-Value="tipi.nomination" class="form-control" />
                    </div>

                    <div class="form-group">

                        <label style="font-weight:bold;color:black">Parent:</label>
                        <input class="custom-checkbox" type="checkbox" @onchange="eventArgs => { CheckboxClicked(eventArgs.Value); }" />
                        @if (Zgjidhprindin.Count!=0)
                        {
                            <select class="form-control"  @onchange="@PrindiChanged">
                                <option value="">-- Select Parent --</option>
                            
                                    @foreach (var zgjidhprindin in Zgjidhprindin)
                                    {
                                        <option value="@zgjidhprindin.uid">@zgjidhprindin.nomination</option>

                                    }
                                
                                
                            </select>
                        }
                        @if (tipi.uid > -1)
                        {
                        <InputNumber  readonly="true"  @bind-Value="tipi.uid_sup" class="form-control" />}
                    </div>

                    <div class="form-group">
                        <label style="font-weight:bold;color:black">Code:</label>
                        <InputText @bind-Value="tipi.code" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label style="font-weight:bold;color:black">Type Elcat:</label><br />
                        <input type="checkbox" @bind="tipi.elcat" />
                    </div>

                    <div class="form-group">
                        <label style="font-weight:bold;color:black">Code end:</label>
                        <InputNumber @bind-Value="tipi.codeend" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label style="font-weight:bold;color:black">Description:</label>
                        <InputText @bind-Value="tipi.description" class="form-control" />
                    </div>

                    <button class="btn btn-primary" type="submit">Submit</button>
                </EditForm>
            </div>
        }
        else
        {
            <p></p>

        }


    </div>
    @*Div-i i messazhit*@
    @if (Message == true)
    {
        <div class="row">
            <p style="text-align:center;color:darkgreen">Ndryshimet u ruajtën me sukses </p>
        </div>
    }
</div>

    @code{

        private List<Kategorite> kategori = new List<Kategorite>();
        private List<MailItem> MyElement = new List<MailItem>();
        private List<MailItem> MyTipElement = new List<MailItem>();
        private List<Tipe> tipet = new List<Tipe>();
        private Tipe tipi = new Tipe();
        SfTreeView<MailItem> tree;
        SfContextMenu menu;
        private bool KrijoTip = false;
        private bool ShfaqButon = false;
        private bool Message = false;
        private string selectedKategoriId;
        private string selectedTipId;
        private string selectedtable;
        private string SelectedParent;
        private  List<tbl_TABLE_Model> Entities = new List<tbl_TABLE_Model>();
        private List<Tipe> Zgjidhprindin = new List<Tipe>();


        private async Task CheckboxClicked(object checkedValue)
        {
            if ((bool)checkedValue)
            {
                Zgjidhprindin = await http.GetJsonAsync<List<Tipe>>("http://192.168.1.118/api/tbl_" + selectedtable + "/GetTyperByCategory?category_uid=" + selectedKategoriId);
            }
            else
            {
                Zgjidhprindin.Clear();
            }
            StateHasChanged();
        }

        private void PrindiChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e)
        {
            tipi.uid_sup = Convert.ToInt32(e.Value.ToString());
        }
        //Mbushja e dropdownlistes me element
        protected override async Task OnInitializedAsync()
        {
            Entities = await http.GetJsonAsync<List<tbl_TABLE_Model>>("http://192.168.1.118/GetAll_Entities");
        }

        //Zgjedhja e nje entiteti
        void EntitieClicked(Microsoft.AspNetCore.Components.ChangeEventArgs e)
        {
            string value = e.Value.ToString();
            selectedtable = value;
            this.GetCategory(value);
            MyElement.Clear();
            MyTipElement.Clear();
            KrijoTip = false;
            ShfaqButon = false;
            Message = false;
            tipi.uid = 0;
            StateHasChanged();

        }

        //Mbushja e treeView kategori me te dhena
        private async Task GetCategory(string entitetiZgjedhur)
        {
            kategori = null;

            string url = "http://192.168.1.118/api/tbl_" + entitetiZgjedhur + "_CATEGORY";
            kategori = await http.GetJsonAsync<List<Kategorite>>(url);
            foreach (var element in kategori)
            {
                MailItem item = new MailItem();
                if (element.uid_sup > 0)
                {
                    item.ParentId = element.uid_sup.ToString();
                }
                foreach (var child in kategori)
                {
                    if (child.uid_sup == element.uid)
                    {
                        item.HasSubFolders = true;
                    }
                }

                item.Id = element.uid.ToString();
                item.ElementName = element.nomination;

                MyElement.Add(item);


            }
            StateHasChanged();

        }

        //Klikimi i nje elementi ne peme per kategorite
        private async void nodeClicked(NodeClickEventArgs args)
        {
            string eventString = JsonConvert.SerializeObject(args.Event);
            Dictionary<string, dynamic> eventParameters = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(eventString);
            if ((eventParameters["which"]).ToString() == "3")
            {
                this.selectedKategoriId = (await args.Node.GetAttribute("data-uid")).ToString();
                StateHasChanged();
            }
        }

        private List<MenuItem> MenuItems = new List<MenuItem>{
        new MenuItem { Text = "Edito Tipet" },

    };

        //Menuja ne klikim te kategorise
        private void MenuSelect(MenuEventArgs args)
        {
            string selectedText;
            selectedText = args.Item.Text;

            if (selectedText == "Edito Tipet")
            {
                ShfaqButon = true;
                Message = false;
                this.FillDataToTipe();
            }

        }

        //Mbushja e tipeve me te dhena
        private async Task FillDataToTipe()
        {
            MyTipElement.Clear();
            Zgjidhprindin.Clear();
            KrijoTip = false;
            tipi.uid = 0;
            string url = "http://192.168.1.118/api/tbl_" + selectedtable + "/GetTyperByCategory?category_uid=" + selectedKategoriId;
            tipet = await http.GetJsonAsync<List<Tipe>>(url);
            foreach (var element in tipet)
            {
                MailItem item = new MailItem();
                if (element.uid_sup > 0)
                {
                    item.ParentId = element.uid_sup.ToString();
                }
                foreach (var child in tipet)
                {
                    if (child.uid_sup == element.uid)
                    {
                        item.HasSubFolders = true;
                    }
                }

                item.Id = element.uid.ToString();
                item.ElementName = element.nomination;

                MyTipElement.Add(item);


            }
            StateHasChanged();

        }

        //Klikimi i nje elementi te pemes Per tipet
        private async void nodeTipClicked(NodeClickEventArgs args)
        {
            string eventString = JsonConvert.SerializeObject(args.Event);
            Dictionary<string, dynamic> eventParameters = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(eventString);
            if ((eventParameters["which"]).ToString() == "3")
            {
                this.selectedTipId = (await args.Node.GetAttribute("data-uid")).ToString();
                StateHasChanged();
            }
        }

        //Menuja qe shfaqet ne klikim te nje tipi
        private void MenuSelectForTipe(MenuEventArgs args)
        {
            string selectedText;
            selectedText = args.Item.Text;
            if (selectedText == "Edit")
            {
                tipi.uid = Convert.ToInt32(selectedTipId);
                this.AddType();
                Message = false;

            }
            else if (selectedText == "Remove")
            {
                this.DeleteType();
                Message = false;

            }
            else if (selectedText == "Add")
            {
                tipi.uid_sup = Convert.ToInt32(selectedTipId);
                this.AddType();
                Message = false;

            }
        }


        private void NewType()
        {
            tipi.uid_sup = -1;

            this.AddType();

        }

        //Shtimi i nje rekordi te ri
        private async Task AddType()
        {
            List<Tipe> list = new List<Tipe>();

            KrijoTip = true;
            if (tipi.uid > 0)
            {
                string url = "http://192.168.1.118/api/tbl_" + selectedtable + "_TYPE/" + selectedTipId;
                List<Tipe> permanent = await http.GetJsonAsync<List<Tipe>>(url);
                tipi = permanent.FirstOrDefault();
            }
            else
            {
                if (tipi.uid_sup != -1)
                {
                    list = await http.GetJsonAsync<List<Tipe>>("http://192.168.1.118/api/tbl_CLIENTS_TYPE/" + selectedTipId);
                    SelectedParent = list.FirstOrDefault().nomination;
                }
                else
                {
                    SelectedParent = "No Parent";
                }
            }

            StateHasChanged();
        }

        //per tu permirsuar selecti i id
        private async Task SaveNewType(EditContext context)
        {

            Tipe model = (Tipe)context.Model;
            if (model.uid != 0)
            {
                string parameters = "?uid_sup=" + model.uid_sup + "&description=" + model.description;
                string url = "http://192.168.1.118/api/tbl_" + selectedtable + "_TYPE/" + selectedTipId + "/" + model.elcat + "/" + model.code + "/" + model.nomination + parameters;
                await http.PutJsonAsync(url, "");




            }

            else
            {
                string parameters = "?codeend=" + model.codeend + "&description=" + model.description;

                string urltosend = "http://192.168.1.118/api/tbl_" + selectedtable + "_TYPE/" + model.uid_sup + "/" + model.elcat + "/" + model.code + "/" + model.nomination + parameters;
                await http.PostJsonAsync(urltosend, "");
                List<LastUid> lst = await http.GetJsonAsync<List<LastUid>>("http://192.168.1.118/api/tbl_INTER_TABLE_TABLE/SelectLastUid?tableName=" + selectedtable + "_TYPE");
                LastUid uidTip = lst.FirstOrDefault();
                string urltypkategori = "http://192.168.1.118/api/tbl_INTER_TABLE_TABLE/SPI_INTER_TABLE_TYPE_CATEGORY?tablename=" + selectedtable + "&tabletype_uid=" + uidTip.uid + "&tabletype_cat_uid=" + selectedKategoriId + "&user_uid=1";

                await http.PostJsonAsync(urltypkategori, "");
            }

            tipi.uid_sup = -1;
            Message = true;
            KrijoTip = false;
            MyTipElement.Clear();
            tipi.uid = 0;
            StateHasChanged();
            await this.FillDataToTipe();

        }


     

       

        //Fshirja e nje tipi
        private async Task DeleteType()
        {
            string url = "http://192.168.1.118/api/tbl_" + selectedtable + "_TYPE/" + selectedTipId.ToString();
            await http.DeleteAsync(url);
            Message = true;
            MyTipElement.Clear();
            StateHasChanged();
            await this.FillDataToTipe();

        }

        // Menuja Listat
        private List<MenuItem> MenuItemsForType = new List<MenuItem>{
        new MenuItem { Text = "Edit" },
        new MenuItem { Text = "Remove" },
        new MenuItem { Text = "Add" }
    };



    }

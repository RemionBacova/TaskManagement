
@page "/elementDetails/{tablename}"
@using Syncfusion.Blazor.Grids
@using TaskManagementInterface.Data.ELEMENT
@using TaskManagementInterface.Services.Element
@using Syncfusion.Blazor.DropDowns
@using TaskManagementInterface.Data
@using TaskManagementInterface.Services.TypeInfo
@using TaskManagementInterface.Data.Models 
@using TaskManagementInterface.Pages.Details.Components 

    <div class="row">
        <div class="col-md-6">

            <SfDropDownList TValue="string" Placeholder="Select Category" TItem="tbl_TABLE_CATEGORY" DataSource="@CategoryDropDown">
                <DropDownListEvents TValue="string" ValueChange="EntitieClicked"></DropDownListEvents>
                <DropDownListFieldSettings Value="uid" Text="nomination"></DropDownListFieldSettings>
            </SfDropDownList>

            <SfGrid TValue="tbl_Element" DataSource="@Element">
                <GridColumns>

                    <GridColumn Field=@nameof(tbl_Element.type) HeaderText="Type" TextAlign="TextAlign.Right" Width="120"></GridColumn>
                    <GridColumn Field=@nameof(tbl_Element.uid) HeaderText="ID" TextAlign="TextAlign.Right" Width="80"></GridColumn>
                    <GridColumn Field=@nameof(tbl_Element.code) HeaderText="Code" Width="150"></GridColumn>

                    <GridColumn Field=@nameof(tbl_Element.nomination) HeaderText="Name" Width="130"></GridColumn>

                    <GridColumn Field=@nameof(tbl_Element.description) HeaderText="Title" Width="120"></GridColumn>
                    <GridColumn HeaderText="Select" Field="@nameof(tbl_Element.uid)" Width="200">
                        <Template>
                            @{
                                <div>
                                    <button class="e-control e-btn e-lib e-flat e-edit-delete e-Editbutton e-icon-btn" @onclick="(() => SelectElement(context as tbl_Element, context as tbl_Element))">
                                        <span class="e-btn-icon e-icons e-edit "></span>
                                    </button>

                                </div>
                            }
                        </Template>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
        <div class="col-md-6">
            <br />
            @foreach (var item in listOfComponents)
            {
                @item;
            }

        </div>
    </div>


@code {

    [Parameter] public string tablename { get; set; }
    string _returnMessage = "";
    string Category = "";

    public List<tbl_Element> Element = new List<tbl_Element>();
    public List<tbl_TABLE_CATEGORY> CategoryDropDown = new List<tbl_TABLE_CATEGORY>();
    ElementServices elementServices = new ElementServices();


    TypeInfoServices typeInfoServices = new TypeInfoServices();

    public List<RenderFragment> listOfComponents = new List<RenderFragment>();


    protected override async Task OnInitializedAsync()
    {
        CategoryDropDown = await elementServices.SelectAllActiveRecCategory(tablename);

        StateHasChanged();
    }

    private async Task EntitieClicked(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> e)
    {
        string value = e.Value.ToString();
        Element = await elementServices.SelectAllActiveRec(value, tablename);
        Category = value;
        StateHasChanged();
    }

    private void SelectElement(tbl_Element uid, tbl_Element typeuid)
    {

        string value = uid.uid.ToString();
        string valueType = typeuid.type_uid.ToString();
        listOfComponents.Clear();
        loadInfo(tablename, value, valueType);

    }

    private async void loadInfo(string Entity, string ElementId, string valueType)
    {
        string tablename= "tbl_" + Entity + "_Type_Info";
        List <tbl_TABLE_TYPE_INFO> list = await typeInfoServices.SelectAllActiveRecByType(tablename, valueType);
        foreach (tbl_TABLE_TYPE_INFO z in list)
        {
            AddComponent(Entity, ElementId, z.uid.ToString(), z.property.ToString());
        }
        StateHasChanged();
    }



    void AddComponent(string Entity, string ElementID, string TypeInfoId, string propertyType)
    {
        listOfComponents.Add(CreateDynamicComponent(Entity, ElementID, TypeInfoId, propertyType));

    }


    RenderFragment CreateDynamicComponent(string Entity, string ElementID, string TypeInfoId, string propertyType) => builder =>
    {
        if (propertyType == "1")
        {
            builder.OpenComponent(0, typeof(IntComponent));
        }
        if (propertyType == "2")
        {
            builder.OpenComponent(0, typeof(StringComponent));
        }



        builder.AddAttribute(1, "Entity", Entity);
        builder.AddAttribute(2, "ElementID", ElementID);
        builder.AddAttribute(3, "TypeInfoId", TypeInfoId);
        builder.CloseComponent();

    };


}



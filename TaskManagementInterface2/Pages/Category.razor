@inherits LayoutComponentBase
@page "/category"
@using TaskManagementInterface.Data
@using Syncfusion.Blazor.Navigations
@using Newtonsoft.Json
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject IJSRuntime jsRunTime
@inject NavigationManager NavigationManager
@inject HttpClient http

<style>
    .sf-license-warning {
        display: none !important;
    }
</style>



<div>
    <h4>Select category</h4>
    <div class="row">

        @*Afishimi i Entiteteve*@
        <div class="col-md-3">
            <select class="form-control" @onchange="@EntitieClicked">
                <option value="">-- Select Entitie --</option>
                @if (Entities != null)
                {
                    @foreach (var entitet in Entities)
                    {
                        <option value="@entitet.nomination">@entitet.nomination</option>

                    }
                }
                else
                {

                }
            </select>
            @if (ShfaqButon == true)
            {
                <br />
                <button class="btn btn-primary" @onclick="NewCategory">Add Category</button>
            }

        </div>
        <div class="col-md-3">


            @*Afishimi i kategorive*@
            @if (MyElement.Count > 0)
            {
                <div id="treeview">
                    <SfTreeView TValue="MailItem" AllowEditing="true">
                        <TreeViewFieldsSettings TValue="MailItem" Id="Id" DataSource="@MyElement" Text="ElementName" ParentID="ParentId" HasChildren="HasSubFolders" Expanded="Expanded"></TreeViewFieldsSettings>
                        <TreeViewEvents TValue="MailItem" NodeClicked="nodeClicked"></TreeViewEvents>
                        <SfContextMenu @ref="menu" Target="#treeview" Items="@MenuItems">
                            <ContextMenuEvents ItemSelected="MenuSelect"></ContextMenuEvents>
                        </SfContextMenu>
                    </SfTreeView>
                </div>
            }
            else
            {
                <p></p>
            }

        </div>

        @*Afishimi i tipeve*@




        @*Editimi i kategorive*@

        @if (kategorite.uid != 0)
        {
            <div class=col-md-3>

                <EditForm Model="@kategorite" OnValidSubmit="SaveEditedCat">

                    <div class="form-group">
                        <label style="font-weight:bold;color:black"> Nomination:</label>
                        <InputText @bind-Value="kategorite.nomination" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label style="font-weight:bold;color:black">Parent:</label>
                        <input class="custom-checkbox" type="checkbox" @onchange="eventArgs => { CheckboxClicked(eventArgs.Value); }" />
                        @if (Zgjidhprindin.Count != 0)
                        {
                    <select class="form-control" @onchange="@PrindiChanged">
                        <option value="">-- Select Parent --</option>

                        @foreach (var zgjidhprindin in Zgjidhprindin)
                        {
                    <option value="@zgjidhprindin.uid_sup">@zgjidhprindin.nomination</option>}


                    </select>}
                        <InputNumber readonly="true" @bind-Value="kategorite.uid_sup" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label style="font-weight:bold;color:black">Code:</label>
                        <InputText @bind-Value="kategorite.code" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label style="font-weight:bold;color:black">Type Elcat:</label><br />
                        <input type="checkbox" @bind="kategorite.elcat" />
                    </div>

                    <div class="form-group">
                        <label style="font-weight:bold;color:black">Queue:</label>
                        <InputNumber @bind-Value="kategorite.queue" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label style="font-weight:bold;color:black">Description:</label>
                        <InputText @bind-Value="kategorite.description" class="form-control" />
                    </div>

                    <button class="btn btn-primary" type="submit">Submit</button>
                </EditForm>
            </div>
        }
        else
        {
            <p></p>

        }



        @*Krijimi i kategori te reja *@
        @if (KrijoKategori != false)
        {
            <div class=col-md-3>
                <EditForm Model="@kategoritenew" OnSubmit="SaveNewCategory">
                    <div class="form-group">
                        <label style="font-weight:bold;color:black"> Parent:</label>
                        <InputNumber @bind-Value="kategoritenew.uid_sup" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label style="font-weight:bold;color:black"> Elcat: </label><br />
                        <input type="checkbox" @bind="kategoritenew.elcat" /><br />
                    </div>

                    <div class="form-group">
                        <label style="font-weight:bold;color:black">Nomination:</label>
                        <InputText @bind-Value="kategoritenew.nomination" class="form-control" />
                    </div>
                    <div class="form-group">
                        <label style="font-weight:bold;color:black"> Code:</label>
                        <InputText @bind-Value="kategoritenew.code" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label style="font-weight:bold;color:black">Queue</label>
                        <InputNumber @bind-Value="kategoritenew.queue" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label style="font-weight:bold;color:black"> Description:</label>
                        <InputText @bind-Value="kategoritenew.description" class="form-control" />
                    </div>

                    <button class="btn btn-primary" type="submit">Submit</button>
                </EditForm>
            </div>
        }
        else
        {
            <p></p>

        }

    </div>
    @*Div-i i messazhit*@
    @if (Message == true)
    {
        <div class="row">
            <p style="text-align:center;color:darkgreen">Ndryshimet u ruajtën me sukses </p>
        </div>
    }
</div>







@code{

    public List<tbl_TABLE_Model> Entities = new List<tbl_TABLE_Model>();
    private List<MailItem> MyElement = new List<MailItem>();
    private List<MailItem> MyTipElement = new List<MailItem>();
    private List<MailItem> MyKategoryElement = new List<MailItem>();



    private List<Kategorite> kategori = new List<Kategorite>();
    private Kategorite kategorite = new Kategorite();
    private Kategorite kategoritenew = new Kategorite();
    private List<Kategorite> Zgjidhprindin = new List<Kategorite>();


    SfTreeView<MailItem> tree;
    SfContextMenu menu;


    bool KrijoKategori = false;
    bool ShfaqButon = false;
    bool Message = false;

    string selectedKategoriId;

    string selectedtable;


    //Mbushja e dropdownlistes me element
    protected override async Task OnInitializedAsync()
    {
        Entities = await http.GetJsonAsync<List<tbl_TABLE_Model>>("http://192.168.1.118/GetAll_Entities");
    }

    //Zgjedhja e nje entiteti
    void EntitieClicked(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        string value = e.Value.ToString();
        selectedtable = value;
        this.GetCategory(value);
        MyElement.Clear();
        MyTipElement.Clear();

        ShfaqButon = true;
        Message = false;
        StateHasChanged();

    }

    //Mbushja e treeView kategori me te dhena
    protected async Task GetCategory(string entitetiZgjedhur)
    {
        kategori = null;

        string url = "http://192.168.1.118/api/tbl_" + entitetiZgjedhur + "_CATEGORY";
        kategori = await http.GetJsonAsync<List<Kategorite>>(url);
        foreach (var element in kategori)
        {
            MailItem item = new MailItem();
            if (element.uid_sup > 0)
            {
                item.ParentId = element.uid_sup.ToString();
            }
            foreach (var child in kategori)
            {
                if (child.uid_sup == element.uid)
                {
                    item.HasSubFolders = true;
                }
            }

            item.Id = element.uid.ToString();
            item.ElementName = element.nomination;

            MyElement.Add(item);


        }
        StateHasChanged();

    }

    //Klikimi i nje elementi ne peme per kategorite
    public async void nodeClicked(NodeClickEventArgs args)
    {
        string eventString = JsonConvert.SerializeObject(args.Event);
        Dictionary<string, dynamic> eventParameters = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(eventString);
        if ((eventParameters["which"]).ToString() == "3")
        {
            this.selectedKategoriId = (await args.Node.GetAttribute("data-uid")).ToString();

            StateHasChanged();
        }
    }

    public List<MenuItem> MenuItems = new List<MenuItem>{

         new MenuItem { Text = "Add" },
         new MenuItem { Text = "Edit" },
         new MenuItem { Text = "Remove" }

    };

    //Menuja ne klikim te kategorise
    public void MenuSelect(MenuEventArgs args)
    {
        string selectedText;
        selectedText = args.Item.Text;

        if (selectedText == "Add")
        {

            Message = false;
            this.AddCategory();
        }
        else if (selectedText == "Edit")
        {

            Message = false;
            this.EditCategory();

        }
        else if (selectedText == "Remove")
        {
            Message = false;
            this.DeleteCategory();
        }


    }







    //Klikimi i nje elementi te pemes Per categorine
    public async void nodeCatClicked(NodeClickEventArgs args)
    {
        string eventString = JsonConvert.SerializeObject(args.Event);
        Dictionary<string, dynamic> eventParameters = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(eventString);
        if ((eventParameters["which"]).ToString() == "3")
        {
            this.selectedKategoriId = (await args.Node.GetAttribute("data-uid")).ToString();
            StateHasChanged();
        }
    }




    //Menuja qe shfaqet ne klikim te nje kategoria
    public void MenuSelectForKategori(MenuEventArgs args)
    {
        string selectedText;
        selectedText = args.Item.Text;
        if (selectedText == "Edit")
        {
            this.EditCategory();
            Message = false;

        }
        else if (selectedText == "Remove")
        {
            this.DeleteCategory();
            Message = false;

        }
        else if (selectedText == "Add")
        {

            this.AddCategory();
            Message = false;

        }
    }




    private void NewCategory()
    {
        kategoritenew.uid_sup = -1;

        this.AddCategory();

    }


    public async Task AddCategory()
    {
        kategoritenew.uid_sup = Convert.ToInt32(selectedKategoriId);
        KrijoKategori = true;
        kategorite.uid = 0;
        StateHasChanged();
    }




    //per tu permirsuar selecti i id
    protected async Task SaveNewCategory(EditContext context)
    {
        Kategorite model = (Kategorite)context.Model;
        string parameters = "?queue=" + model.queue + "&description=" + model.description;

        string urltosend = "http://192.168.1.118/api/tbl_" + selectedtable + "_CATEGORY/" + model.uid_sup + "/" + model.elcat + "/" + model.code + "/" + model.nomination + parameters;
        await http.PostJsonAsync(urltosend, "");
        List<LastUid> lst = await http.GetJsonAsync<List<LastUid>>("http://192.168.1.118/api/tbl_INTER_TABLE_TABLE/SelectLastUid?tableName=" + selectedtable + "_CATEGORY");
        LastUid uidKat = lst.FirstOrDefault();
        string urltypkategori = "http://192.168.1.118/api/tbl_INTER_TABLE_TABLE/SPI_INTER_TABLE_CATEGORY?tablename=" + selectedtable + "&table_uid=" + uidKat.uid + "&tablecat_uid=" + selectedKategoriId + "&user_uid=1";

        await http.PostJsonAsync(urltypkategori, "");
        kategoritenew.uid_sup = -1;
        Message = true;
        KrijoKategori = false;
        MyKategoryElement.Clear();
        StateHasChanged();


    }





    //Editimi i nje rekordi
    public async Task EditCategory()
    {
        KrijoKategori = false;
        string url = "http://192.168.1.118/api/tbl_" + selectedtable + "_CATEGORY/" + selectedKategoriId;
        List<Kategorite> permanent = await http.GetJsonAsync<List<Kategorite>>(url);
        kategorite = permanent.FirstOrDefault();
        StateHasChanged();
    }


    //editimi ka ngelur pergjys
    protected async Task SaveEditedCat(EditContext context)
    {
        Kategorite model = (Kategorite)context.Model;
        string parameters = "?description=" + model.description + "&user_uid=1";
        string url = "http://192.168.1.118/api/tbl_" + selectedtable + "_CATEGORY/" + selectedKategoriId + "/" + model.uid_sup + "/" + model.elcat + "/" + model.code + "/" + model.nomination + parameters;
        await http.PutJsonAsync(url, "");
        Message = true;
        kategorite.uid = 0;
        MyKategoryElement.Clear();
        kategoritenew.uid_sup = -1;
        this.StateHasChanged();



    }

 





    private async Task CheckboxClicked(object checkedValue)
    {
        if ((bool)checkedValue)
        {
            Zgjidhprindin = await http.GetJsonAsync<List<Kategorite>>("http://192.168.1.118/api/tbl_" + selectedtable + "_Category");
        }
        else
        {
            Zgjidhprindin.Clear();
        }
        StateHasChanged();
    }


    private void PrindiChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
        kategorite.uid_sup = Convert.ToInt32(e.Value.ToString());
    }









    //Fshirja e nje kategorie
    protected async Task DeleteCategory()
    {
        string url = "http://192.168.1.118/api/tbl_" + selectedtable + "_CATEGORY/" + selectedKategoriId.ToString();
        await http.DeleteAsync(url);
        Message = true;
        MyKategoryElement.Clear();
        StateHasChanged();


    }


    // Menuja Listat
    public List<MenuItem> MenuItemsForType = new List<MenuItem>{
        new MenuItem { Text = "Edit" },
        new MenuItem { Text = "Remove" },
        new MenuItem { Text = "Add" }
    };

    //Klasat
    public class MailItem
    {
        public string Id { get; set; }
        public string ParentId { get; set; }
        public string ElementName { get; set; }
        public bool Expanded { get; set; }
        public bool HasSubFolders { get; set; }
    }



}

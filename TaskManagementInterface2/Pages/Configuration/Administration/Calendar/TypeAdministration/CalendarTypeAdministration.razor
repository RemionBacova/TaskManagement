@using Syncfusion.Blazor.Grids
@page "/CalendarAdministration"
@page "/CalendarAdministration/{tablename}"
@using TaskManagementInterface.Data.ELEMENT
@using TaskManagementInterface.Services.Element
@using Syncfusion.Blazor.DropDowns
@using TaskManagementInterface.Data
@using TaskManagementInterface.Shared.Calendar
@inject IModalService Modal



<div class="row">
    <div class="col-md-11">
        <SfDropDownList TValue="string" Placeholder="Select Category" TItem="tbl_TABLE_CATEGORY" DataSource="@CategoryDropDown">
            <DropDownListEvents TValue="string" ValueChange="EntitieClicked"></DropDownListEvents>
            <DropDownListFieldSettings Value="uid" Text="nomination"></DropDownListFieldSettings>
        </SfDropDownList>
    </div>
</div>
<div>
    <br />
    <button class="e-tbar-btn e-tbtn-txt e-control e-btn e-lib" type="button" aria-label="Add" style="width: auto;" @onclick="(() => ShowModalAdd())" >
        <span class="e-btn-icon e-add e-icons e-icon-left">
        </span><span class="e-tbar-btn-text">Add</span>
    </button>

    <SfGrid TValue="tbl_Element" DataSource="@Element">
        <GridColumns>
            
            <GridColumn Field=@nameof(tbl_Element.type) HeaderText="Type" TextAlign="TextAlign.Left" Width="120"></GridColumn>
            <GridColumn Field=@nameof(tbl_Element.uid) HeaderText="Calendar ID" TextAlign="TextAlign.Right" Width="0"></GridColumn>
           
                <GridColumn Field=@nameof(tbl_Element.nomination) HeaderText="Nomination" Width="130"></GridColumn>
            
            <GridColumn Field=@nameof(tbl_Element.description) HeaderText="Description" Width="120"></GridColumn>
            <GridColumn HeaderText="Edit" Field="@nameof(tbl_Element.uid)" Width="200">
                <Template>
                    @{
                        <div>
                            <button class="e-control e-btn e-lib e-flat e-edit-delete e-Editbutton e-icon-btn" @onclick="(() => ShowModalEdit(context as tbl_Element))">
                                <span class="e-btn-icon e-icons e-edit "></span>
                            </button>
                            <button class="e-control e-btn e-lib e-flat e-edit-delete e-Deletebutton e-icon-btn" @onclick="(() => ShowModalDelete(context as tbl_Element))">
                                <span class="e-btn-icon e-icons e-delete "></span>
                            </button>
                        </div>
                    }
                </Template>
            </GridColumn>
        </GridColumns>
    </SfGrid>
</div>





@code{

    [Parameter] public string tablename { get; set; }
    string _returnMessage = "";
    string Category = "";
    public List<tbl_Element> Element = new List<tbl_Element>();
    public List<tbl_TABLE_CATEGORY> CategoryDropDown = new List<tbl_TABLE_CATEGORY>();

    ElementServices elementServices = new ElementServices();

    protected override async Task OnInitializedAsync()
    {
        CategoryDropDown = await elementServices.SelectAllActiveRecCategory(tablename);
        StateHasChanged();
    }
    private async Task ShowModalAdd()
    {

        var parameters = new ModalParameters();
        parameters.Add(nameof(AddOrEditCalendar.addOrEdit), true);
        parameters.Add(nameof(AddOrEditCalendar.tableName), tablename);
        parameters.Add(nameof(AddOrEditCalendar.uid),0);
        parameters.Add(nameof(AddOrEditCalendar.Category), Category);
        var messageForm = Modal.Show<AddOrEditCalendar>("Edit Calendar", parameters);// tittle parameters
        var result = await messageForm.Result;
        if (!result.Cancelled)
            _returnMessage = result.Data?.ToString() ?? string.Empty;
        Element = await elementServices.SelectAllActiveRec(Category, tablename);
    }


    private async Task EntitieClicked(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> e)
    {
        string value = e.Value.ToString();
        Element = await elementServices.SelectAllActiveRec(value, tablename);
        Category = value;
        StateHasChanged();


    }

    private async Task ShowModalEdit(tbl_Element model)
    {

        var parameters = new ModalParameters();
        parameters.Add(nameof(AddOrEditCalendar.addOrEdit), false);
        parameters.Add(nameof(AddOrEditCalendar.tableName), tablename);
        parameters.Add(nameof(AddOrEditCalendar.uid), model.uid);
        parameters.Add(nameof(AddOrEditCalendar.Category), Category);
        var messageForm = Modal.Show<AddOrEditCalendar>("Edit Element", parameters);// tittle parameters
        var result = await messageForm.Result;
        if (!result.Cancelled)
            _returnMessage = result.Data?.ToString() ?? string.Empty;
        Element = await elementServices.SelectAllActiveRec(Category,tablename);
    }
    private async Task ShowModalDelete(tbl_Element model)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(DeleteCalendar.tableName), tablename);
        parameters.Add(nameof(DeleteCalendar.uid), model.uid);
        var messageForm = Modal.Show<DeleteCalendar> ("Delete", parameters);// tittle parameters
        var result = await messageForm.Result;
        if (!result.Cancelled)
            _returnMessage = result.Data?.ToString() ?? string.Empty;
      
        Element = await elementServices.SelectAllActiveRec(Category, tablename);
    }

}

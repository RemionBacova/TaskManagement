@page "/TypeInfoAdministration"
@using Syncfusion.Blazor.TreeGrid
@using Syncfusion.Blazor.Grids
@using TaskManagementInterface.Data.Models
@inject HttpClient http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components
@inject IModalService Modal
@using TaskManagementInterface.Shared.Type
@using TaskManagementInterface.Services.Categories
@using TaskManagementInterface.Services.Entitet
@using TaskManagementInterface.Services.Types
@using TaskManagementInterface.Shared.TypeInfo
@using Syncfusion.Blazor.DropDowns
@using TaskManagementInterface.Data 
@using Syncfusion.Blazor.Inputs 
@using Syncfusion.Blazor.Buttons


    <div>
        <div class="row">
            <div class="col-md-11">
                <SfDropDownList TValue="string" Placeholder="Select Entitie" TItem="tbl_TABLE_Model" DataSource="@Entities">
                    <DropDownListEvents TValue="string" ValueChange="EntitieClicked"></DropDownListEvents>
                    <DropDownListFieldSettings Value="nomination"></DropDownListFieldSettings>
                </SfDropDownList>
            </div>
        </div>

            <div class="row">

                <div class="col-md-11">
                    <SfTextBox  Readonly="true" Placeholder='Select Category' FloatLabelType='@FloatLabelType.Auto' @bind-Value="CategoryName"></SfTextBox>
                </div>
                <div class="col-md-1">

                    <SfButton CssClass="e-round" IconCss="e-icons e-plus-icon" IsPrimary="true" @onclick="ShowKategori"></SfButton>

                </div>
            </div>

            <div class="row">
                <div class="col-md-11">
                    <SfTextBox  Readonly="true" Placeholder='Select Type' FloatLabelType='@FloatLabelType.Auto' @bind-Value="TypeName"></SfTextBox>
                </div>
                <div class="col-md-1">
                    <SfButton CssClass="e-round" IconCss="e-icons e-plus-icon" IsPrimary="true" @onclick="ShowType"></SfButton>
                </div>
            </div>
            <br />
            @if (Tree.Count == 0)
            {
                <br />
                <label>Please Select Value From Dropdowns</label>
            }
            else
            {

                <button class="e-tbar-btn e-tbtn-txt e-control e-btn e-lib" type="button" aria-label="Add" style="width: auto;" @onclick="ShowModalAdd">
                    <span class="e-btn-icon e-add e-icons e-icon-left">
                    </span><span class="e-tbar-btn-text">Add</span>
                </button>
                <div class="col-lg-12 control-section">
                    <div class="content-wrapper">
                        <div class="row">
                            <SfTreeGrid DataSource="@Tree" TValue="tbl_TABLE_TYPE_INFO" IdMapping="uid" ParentIdMapping="uid_sup" TreeColumnIndex="1" AllowPaging="true" AllowSorting="true" Height="600">
                                <TreeGridEvents TValue="tbl_TABLE_TYPE_INFO"> </TreeGridEvents>
                                <TreeGridPageSettings PageSize="100"></TreeGridPageSettings>
                               
                                <TreeGridColumns>
                                    <TreeGridColumn Field="uid" HeaderText="ElementID" Width="0" TextAlign="TextAlign.Left"></TreeGridColumn>
                                    <TreeGridColumn Field="nomination" HeaderText="Nomination" Width="20%"></TreeGridColumn>
                                    <TreeGridColumn Field="description" HeaderText="Description" Width="20%"></TreeGridColumn>
                                    <TreeGridColumn Field="description2" HeaderText="Types" Width="20%"></TreeGridColumn>
                                    <TreeGridColumn Field="mandatory" HeaderText="Mandatory" Width="20%" Type="Syncfusion.Blazor.Grids.ColumnType.Boolean" EditType="Syncfusion.Blazor.Grids.EditType.BooleanEdit" DisplayAsCheckBox="true" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></TreeGridColumn>
                                    <TreeGridColumn Field="file" HeaderText="File" Width="20%" Type="Syncfusion.Blazor.Grids.ColumnType.Boolean" EditType="Syncfusion.Blazor.Grids.EditType.BooleanEdit" DisplayAsCheckBox="true" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></TreeGridColumn>
                                    <TreeGridColumn HeaderText="Edit" Field="uid" Width="200">
                                        <Template>
                                            @{
                                                <div>
                                                    <button class="e-control e-btn e-lib e-flat e-edit-delete e-Editbutton e-icon-btn" @onclick="(() => ShowModalEdit(context as tbl_TABLE_TYPE_INFO))">
                                                        <span class="e-btn-icon e-icons e-edit "></span>
                                                    </button>
                                                    <button class="e-control e-btn e-lib e-flat e-edit-delete e-Deletebutton e-icon-btn" @onclick="(() => ShowModalDelete(context as tbl_TABLE_TYPE_INFO))">
                                                        <span class="e-btn-icon e-icons e-delete "></span>
                                                    </button>
                                                </div>
                                            }
                                        </Template>
                                    </TreeGridColumn>
                                </TreeGridColumns>
                            </SfTreeGrid>
                        </div>
                    </div>
                </div>
            }

        </div>





        @code {
            private List<TaskManagementInterface.Data.tbl_TABLE_Model> Entities = new List<Data.tbl_TABLE_Model>();
            EntitetService entitetservice = new EntitetService();
            TypeServices TypeServices = new TypeServices();
            TaskManagementInterface.Services.TypeInfo.TypeInfoServices typeinfoservice = new Services.TypeInfo.TypeInfoServices();


            public string CategoryName = "";
            public string TypeName = "";
            public string selectedTable = "";
            public string selectedTypeTable = "";
            public string CategoryUID = "";
            public string TypeUID = "";
            private List<tbl_TABLE_TYPE_INFO> Tree = new List<tbl_TABLE_TYPE_INFO>();
            string _returnMessage = "";

            string _tablename = "";
            protected override async Task OnInitializedAsync()
            {
                Entities = await entitetservice.SelectEntities();
            }
            private async Task EntitieClicked(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string> e)
            {
                string value = e.Value.ToString();
                if (value != "-1")
                {
                    _tablename = "tbl_" + value + "_Category";
                    selectedTable = "tbl_" + value + "_Type";
                    selectedTypeTable = "tbl_" + value + "_Type_Info";
                }
                CategoryName = "";
                TypeName = "";
                Tree.Clear();
            }

            async Task ShowModalAdd()
            {
                var parameters = new ModalParameters();
                parameters.Add(nameof(AddOrEditTypeInfo.addOrEdit), true);
                parameters.Add(nameof(AddOrEditTypeInfo.tableName), selectedTypeTable);
                parameters.Add(nameof(AddOrEditTypeInfo.uid), 0);
                var messageForm = Modal.Show<AddOrEditTypeInfo>("Add Category", parameters);// tittle parameters
                var result = await messageForm.Result;
                if (!result.Cancelled)
                    _returnMessage = result.Data?.ToString() ?? string.Empty;
                Tree = await typeinfoservice.SelectAllActiveRecByType(selectedTypeTable, TypeUID);

            }

            private async Task ShowModalEdit(tbl_TABLE_TYPE_INFO modeltype)
            {

                var parameters = new ModalParameters();
                parameters.Add(nameof(AddOrEditTypeInfo.addOrEdit), false);
                parameters.Add(nameof(AddOrEditTypeInfo.tableName), selectedTypeTable);
                parameters.Add(nameof(AddOrEditTypeInfo.uid), modeltype.uid);
                var messageForm = Modal.Show<AddOrEditTypeInfo>("Edit Type", parameters);// tittle parameters
                var result = await messageForm.Result;
                if (!result.Cancelled)
                    _returnMessage = result.Data?.ToString() ?? string.Empty;
                Tree = await typeinfoservice.SelectAllActiveRecByType(selectedTypeTable, TypeUID);
            }

            private async Task ShowModalDelete(tbl_TABLE_TYPE_INFO test)
            {
                var parameters = new ModalParameters();
                parameters.Add(nameof(TaskManagementInterface.Shared.TypeInfo.DeleteTypeInfo.tableName), selectedTypeTable);
                parameters.Add(nameof(TaskManagementInterface.Shared.TypeInfo.DeleteTypeInfo.uid), test.uid);
                var messageForm = Modal.Show<TaskManagementInterface.Shared.TypeInfo.DeleteTypeInfo>("Delete Type", parameters);// tittle parameters
                var result = await messageForm.Result;
                if (!result.Cancelled)
                    _returnMessage = result.Data?.ToString() ?? string.Empty;
                Tree = await typeinfoservice.SelectAllActiveRecByType(selectedTypeTable, TypeUID);
            }
            private async Task ShowKategori()
            {
                TypeName = "";
                Tree.Clear();
                var parameters = new ModalParameters();

                parameters.Add(nameof(TaskManagementInterface.Shared.TypeInfo.ChooseCategoryModal.tableName), _tablename);
                var messageForm = Modal.Show<TaskManagementInterface.Shared.TypeInfo.ChooseCategoryModal>("Choose", parameters);

                var result = await messageForm.Result;
                //Select All Types By Category ID
                CategoryUID = result.Data.ToString();


                CategoryName = (await TypeServices.SelectCurrentCageory(_tablename, CategoryUID)).nomination;


            }

            private async Task ShowType()
            {
                TypeName = "";
                Tree.Clear();
                var parameters = new ModalParameters();

                parameters.Add(nameof(TaskManagementInterface.Shared.TypeInfo.ChooseTypeModal.tableName), selectedTable);
                parameters.Add(nameof(TaskManagementInterface.Shared.TypeInfo.ChooseTypeModal.uid), CategoryUID);
                var messageForm = Modal.Show<TaskManagementInterface.Shared.TypeInfo.ChooseTypeModal>("Choose", parameters);

                var result = await messageForm.Result;

                try
                {
                    TypeUID = result.Data.ToString();

                    Tree = await typeinfoservice.SelectAllActiveRecByType(selectedTypeTable, TypeUID);
                    TypeName = (await typeinfoservice.SelectCurrentType(selectedTable, TypeUID)).nomination;
                }
                catch
                {

                }

            }

        }
    
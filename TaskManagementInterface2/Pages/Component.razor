@page "/Component"
@using Syncfusion.Blazor.TreeGrid
@using Syncfusion.Blazor.Grids
@using TaskManagementInterface.Data
@inject HttpClient http
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components



<style>




    .sf-license-warning {
        display: none !important;
    }

    .custom {
        font-weight: 900;
        color: black;
    }
</style>

@{
    List<CommandModel> commands = new List<CommandModel>();
    commands.Add(new CommandModel() { ButtonOption = new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" }, Type = CommandButtonType.Edit });
    commands.Add(new CommandModel() { ButtonOption = new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" }, Type = CommandButtonType.Delete });
    commands.Add(new CommandModel() { ButtonOption = new CommandButtonOptions() { IconCss = "e-icons e-update", CssClass = "e-flat" }, Type = CommandButtonType.Save });
    commands.Add(new CommandModel() { ButtonOption = new CommandButtonOptions() { IconCss = "e-icons e-cancel-icon", CssClass = "e-flat" }, Type = CommandButtonType.Cancel });
}


<h3>Categories</h3>
<div class="row">
    <div class=" col-md-4">
        @if (deleteConfirmation)
        {
            <div class="modal" tabindex="-1" style="display:block;" role="dialog">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-body">
                            <label>Are you sure that you want to delete this item ?</label><br />
                            <button class="btn btn-primary" type="button" @onclick="DeleteRecord">Delete</button>
                            <button class="btn btn-primary" type="button" @onclick="CancelConf">Cancel</button>
                        </div>
                    </div>
                </div>
            </div>
        }
        @if (ShowPopup == true)
        {

        }

    </div>
</div>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">

            <SfTreeGrid DataSource="@TreeData" TValue="Kategorite" IdMapping="uid" ParentIdMapping="uid_sup" TreeColumnIndex="1" AllowPaging="true" Height="600"
                        Toolbar="@(new List<string>() { "Add" })">
                <TreeGridEvents TValue="Kategorite"
                                OnActionBegin="OnActionBegin"> </TreeGridEvents>
                <TreeGridPageSettings PageSize="100"></TreeGridPageSettings>

                <TreeGridEditSettings AllowEditing="true" AllowAdding="true" AllowDeleting="true"></TreeGridEditSettings>
                <TreeGridColumns>
                    <TreeGridColumn Field="uid" HeaderText="ElementID" Width="0" TextAlign="TextAlign.Left"></TreeGridColumn>
                    <TreeGridColumn Field="code" HeaderText="CODE" Width="10%" TextAlign="TextAlign.Left"></TreeGridColumn>
                    <TreeGridColumn Field="nomination" HeaderText="Nomination" Width="30%"></TreeGridColumn>
                    <TreeGridColumn Field="description" HeaderText="Description" Width="30%"></TreeGridColumn>
                    <TreeGridColumn Field="elcat" HeaderText="Contains Elements" Width="30%" Type="Syncfusion.Blazor.Grids.ColumnType.Boolean" EditType="Syncfusion.Blazor.Grids.EditType.BooleanEdit" DisplayAsCheckBox="true" TextAlign="Syncfusion.Blazor.Grids.TextAlign.Center"></TreeGridColumn>
                    <TreeGridColumn HeaderText="Manage Records" Width="150" Commands="@commands"></TreeGridColumn>

                </TreeGridColumns>
            </SfTreeGrid>

        </div>
    </div>
</div>
@code{
    public List<TaskManagementInterface.Data.Kategorite> TreeData = new List<Kategorite>();
    public List<TaskManagementInterface.Data.Kategorite> Parent = new List<Kategorite>();
    Kategorite kategoriModel = new Kategorite();
    private string SelectedTable;
    bool ShowPopup = false;
    bool deleteConfirmation = false;



    protected override async Task OnInitializedAsync()
    {
        await FillDataIntoTable();
    }

    private async Task FillDataIntoTable()
    {
        TreeData = await http.GetJsonAsync<List<Kategorite>>("http://192.168.1.118/api/tbl_clients_CATEGORY");
    }


    private async Task DeleteRecord()
    {
        await DeleteCategory(kategoriModel);
        deleteConfirmation = false;
        await FillDataIntoTable();
        StateHasChanged();
    }
    private void Cancel()
    {
        ShowPopup = false;
    }
    private void CancelConf()
    {
        deleteConfirmation = false;
    }
    void Disablepopup()
    {
        ShowPopup = false;
    }
    public async Task Save(EditContext obj)
    {
        Kategorite model = (Kategorite)(obj.Model);

        if (model.uid > 0)
        {
            string parameters = "?description=" + model.description;
            string url = "http://192.168.1.118/api/tbl_CLIENTS_CATEGORY/" + model.uid + "/" + model.uid_sup + "/" + model.elcat + "/" + model.code + "/" + model.nomination + parameters;
            await http.PutJsonAsync(url, "");
            ShowPopup = false;
            await FillDataIntoTable();
            StateHasChanged();
        }
        else
        {

            string urltypkategori = "http://192.168.1.118/api/tbl_CLIENTS_CATEGORY/" + model.uid_sup + "/" + model.elcat + "/" + model.code + "/" + model.nomination;
            await http.PostJsonAsync(urltypkategori, "");
            ShowPopup = false;
            await FillDataIntoTable();
            StateHasChanged();

        }
    }
    private void Prind(Microsoft.AspNetCore.Components.ChangeEventArgs e)
    {
    }
    public void OnActionBegin(ActionEventArgs<Kategorite> args)
    {

        if (args.RequestType.ToString() == "BeginEdit")
        {
            kategoriModel = (Kategorite)(args.RowData);
            ShowPopup = true;
            Parent = TreeData; // duhet te meret call nga get possible partens
            NavigationManager.NavigateTo("/AddComponent" + "/" + kategoriModel);
        }
        else if (args.RequestType.ToString() == "Add")
        {
            kategoriModel = (Kategorite)(args.Data);
            Parent = TreeData; // duhet te meret call nga gettree
            ShowPopup = true;

            NavigationManager.NavigateTo("/AddComponent/" + kategoriModel);
        }
        else if (args.RequestType.ToString() == "Delete")
        {
            kategoriModel = (Kategorite)(args.Data);
            deleteConfirmation = true;
        }
        StateHasChanged();

    }
    private async Task DeleteCategory(Kategorite DeleteKategori)
    {
        string url = "http://192.168.1.118/api/tbl_CLIENTS_Category/" + DeleteKategori.uid;
        await http.DeleteAsync(url);
        StateHasChanged();

    }
}
#pragma checksum "C:\Users\Administration\Documents\GitHub\TaskManagement\TaskManagementInterface2\Shared\Type\AddOrEditType.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "89c1e19059994d918467c8bbb8b5c551f8b33ad4"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace TaskManagementInterface.Shared.Type
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Administration\Documents\GitHub\TaskManagement\TaskManagementInterface2\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Administration\Documents\GitHub\TaskManagement\TaskManagementInterface2\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Administration\Documents\GitHub\TaskManagement\TaskManagementInterface2\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Administration\Documents\GitHub\TaskManagement\TaskManagementInterface2\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Administration\Documents\GitHub\TaskManagement\TaskManagementInterface2\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Administration\Documents\GitHub\TaskManagement\TaskManagementInterface2\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Administration\Documents\GitHub\TaskManagement\TaskManagementInterface2\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Administration\Documents\GitHub\TaskManagement\TaskManagementInterface2\_Imports.razor"
using TaskManagementInterface;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Administration\Documents\GitHub\TaskManagement\TaskManagementInterface2\_Imports.razor"
using TaskManagementInterface.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Administration\Documents\GitHub\TaskManagement\TaskManagementInterface2\_Imports.razor"
using Blazored;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Administration\Documents\GitHub\TaskManagement\TaskManagementInterface2\_Imports.razor"
using Blazored.Modal;

#line default
#line hidden
#nullable disable
#nullable restore
#line 12 "C:\Users\Administration\Documents\GitHub\TaskManagement\TaskManagementInterface2\_Imports.razor"
using Blazored.Modal.Services;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Administration\Documents\GitHub\TaskManagement\TaskManagementInterface2\Shared\Type\AddOrEditType.razor"
using TaskManagementInterface.Data.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Administration\Documents\GitHub\TaskManagement\TaskManagementInterface2\Shared\Type\AddOrEditType.razor"
using TaskManagementInterface.Services.Types;

#line default
#line hidden
#nullable disable
    public partial class AddOrEditType : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 106 "C:\Users\Administration\Documents\GitHub\TaskManagement\TaskManagementInterface2\Shared\Type\AddOrEditType.razor"
                   
                [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

                private tbl_TABLE_TYPE TypeModel = new tbl_TABLE_TYPE();
                TypeServices typeServices = new TypeServices();
                [Parameter] public bool addOrEdit { get; set; }
                [Parameter] public string tableName { get; set; }
                [Parameter] public int uid { get; set; }
                [Parameter] public string uid_sup { get; set; }
                [Parameter] public string CategoryUID { get; set; }

                private string returnValue = "";
                public string ParentName = "";
                public string ParentID = "";

                protected async void OnLoad()
                {


                    if (!addOrEdit)
                    {

                        TypeModel = await typeServices.SelectRecById(tableName, uid.ToString());

                        if (TypeModel.uid_sup != null)
                        {
                            ParentID = TypeModel.uid_sup.ToString();
                            ParentName = (await typeServices.SelectRecById(tableName, TypeModel.uid_sup.ToString())).nomination;

                        }
                        else
                        {
                            ParentID = "";
                            ParentName = "";
                        }


                    }
                    StateHasChanged();
                }

                protected override void OnInitialized() => OnLoad();

                void SubmitForm() => Save();
                void Cancel() => BlazoredModal.Cancel();

                protected async Task Save()
                {

                    TaskManagementInterface.Data.Error errorModel = new TaskManagementInterface.Data.Error();
                    string parameters;
                    if (ParentID == "")
                    {

                        parameters = "?description=" + TypeModel.description + "&codeend=" + TypeModel.codeend+ "&codebegin=" + TypeModel.codebegin+ "&codeend=" + TypeModel.codeend;
                    }
                    else
                    {
                        parameters = "?uid_sup=" + ParentID + "&description=" + TypeModel.description + "&codeend="+TypeModel.codeend+ "&codebegin=" + TypeModel.codebegin + "&codeactual" + TypeModel.codeactual;
                    }

                    if (!addOrEdit)
                    {

                        errorModel =  await typeServices.Update(TypeModel, tableName, parameters);
                        var parametersError = new ModalParameters();

                        parametersError.Add(nameof(ErrorDatabaseMessage.ErrorName), errorModel.ERRORNAME);
                        parametersError.Add(nameof(ErrorDatabaseMessage.Id), errorModel.UID);
                        var messageForm = Modal.Show<ErrorDatabaseMessage>("Message", parametersError);

                    }
                    else
                    {
                        errorModel=  await typeServices.Add(TypeModel, tableName,CategoryUID, parameters);
                        var parametersError = new ModalParameters();
                        parametersError.Add(nameof(ErrorDatabaseMessage.ErrorName), errorModel.ERRORNAME);
                        parametersError.Add(nameof(ErrorDatabaseMessage.Id), errorModel.UID);
                        var messageForm = Modal.Show<ErrorDatabaseMessage>("Message", parametersError);



                        var result = await messageForm.Result;


                    }
                    StateHasChanged();
                    BlazoredModal.Close(ModalResult.Ok(returnValue));
                }

                async Task ButtonParent()
                {
                    var parameters2 = new ModalParameters();

                    parameters2.Add(nameof(ParentTypeModal.tableName), tableName);
                    parameters2.Add(nameof(ParentTypeModal.uid), uid);
                    var messageForm = Modal.Show<ParentTypeModal>("Select Parent", parameters2);



                    var result = await messageForm.Result;
                    /// do mar result dhe do e vej tek text box

                    if (result.Data is null)
                    {
                        ParentID = "";
                    }
                    else
                    {
                        ParentID = result.Data.ToString();
                    }


                    if (ParentID != "")
                    {

                        ParentName = (await typeServices.SelectRecById(tableName,ParentID)).nomination;

                    }
                    else
                    {
                        ParentName = "";
                    }

                }


                

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IModalService Modal { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private HttpClient http { get; set; }
    }
}
#pragma warning restore 1591
